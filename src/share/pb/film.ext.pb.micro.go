// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: film.ext.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FilmServiceExt service

func NewFilmServiceExtEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FilmServiceExt service

type FilmServiceExtService interface {
	// 获取正在售票的影片
	HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRsp, error)
	// 电影详情
	MovieDetail(ctx context.Context, in *MovieDetailReq, opts ...client.CallOption) (*MovieDetailRsp, error)
	// 获取导演与演员信息
	MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, opts ...client.CallOption) (*MovieCreditsWithTypesRsp, error)
	// 获取海报信息
	ImageAll(ctx context.Context, in *ImageAllReq, opts ...client.CallOption) (*ImageAllRsp, error)
	// 正在热映的影片
	LocationMovies(ctx context.Context, in *LocationMoviesReq, opts ...client.CallOption) (*LocationMoviesRsp, error)
	// 即将上映的影片
	MovieComingNew(ctx context.Context, in *MovieComingNewReq, opts ...client.CallOption) (*MovieComingNewRsp, error)
	// 图片搜索
	Search(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchRsp, error)
	// 根据影院id和时间获取正在销售的影片信息
	GetFilmsByCidADay(ctx context.Context, in *GetFilmsByCidADayReq, opts ...client.CallOption) (*GetFilmsByCidADayRsp, error)
}

type filmServiceExtService struct {
	c    client.Client
	name string
}

func NewFilmServiceExtService(name string, c client.Client) FilmServiceExtService {
	return &filmServiceExtService{
		c:    c,
		name: name,
	}
}

func (c *filmServiceExtService) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.HotPlayMovies", in)
	out := new(HotPlayMoviesRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) MovieDetail(ctx context.Context, in *MovieDetailReq, opts ...client.CallOption) (*MovieDetailRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.MovieDetail", in)
	out := new(MovieDetailRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, opts ...client.CallOption) (*MovieCreditsWithTypesRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.MovieCreditsWithTypes", in)
	out := new(MovieCreditsWithTypesRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) ImageAll(ctx context.Context, in *ImageAllReq, opts ...client.CallOption) (*ImageAllRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.ImageAll", in)
	out := new(ImageAllRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) LocationMovies(ctx context.Context, in *LocationMoviesReq, opts ...client.CallOption) (*LocationMoviesRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.LocationMovies", in)
	out := new(LocationMoviesRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) MovieComingNew(ctx context.Context, in *MovieComingNewReq, opts ...client.CallOption) (*MovieComingNewRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.MovieComingNew", in)
	out := new(MovieComingNewRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) Search(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.Search", in)
	out := new(SearchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtService) GetFilmsByCidADay(ctx context.Context, in *GetFilmsByCidADayReq, opts ...client.CallOption) (*GetFilmsByCidADayRsp, error) {
	req := c.c.NewRequest(c.name, "FilmServiceExt.GetFilmsByCidADay", in)
	out := new(GetFilmsByCidADayRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FilmServiceExt service

type FilmServiceExtHandler interface {
	// 获取正在售票的影片
	HotPlayMovies(context.Context, *HotPlayMoviesReq, *HotPlayMoviesRsp) error
	// 电影详情
	MovieDetail(context.Context, *MovieDetailReq, *MovieDetailRsp) error
	// 获取导演与演员信息
	MovieCreditsWithTypes(context.Context, *MovieCreditsWithTypesReq, *MovieCreditsWithTypesRsp) error
	// 获取海报信息
	ImageAll(context.Context, *ImageAllReq, *ImageAllRsp) error
	// 正在热映的影片
	LocationMovies(context.Context, *LocationMoviesReq, *LocationMoviesRsp) error
	// 即将上映的影片
	MovieComingNew(context.Context, *MovieComingNewReq, *MovieComingNewRsp) error
	// 图片搜索
	Search(context.Context, *SearchReq, *SearchRsp) error
	// 根据影院id和时间获取正在销售的影片信息
	GetFilmsByCidADay(context.Context, *GetFilmsByCidADayReq, *GetFilmsByCidADayRsp) error
}

func RegisterFilmServiceExtHandler(s server.Server, hdlr FilmServiceExtHandler, opts ...server.HandlerOption) error {
	type filmServiceExt interface {
		HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, out *HotPlayMoviesRsp) error
		MovieDetail(ctx context.Context, in *MovieDetailReq, out *MovieDetailRsp) error
		MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, out *MovieCreditsWithTypesRsp) error
		ImageAll(ctx context.Context, in *ImageAllReq, out *ImageAllRsp) error
		LocationMovies(ctx context.Context, in *LocationMoviesReq, out *LocationMoviesRsp) error
		MovieComingNew(ctx context.Context, in *MovieComingNewReq, out *MovieComingNewRsp) error
		Search(ctx context.Context, in *SearchReq, out *SearchRsp) error
		GetFilmsByCidADay(ctx context.Context, in *GetFilmsByCidADayReq, out *GetFilmsByCidADayRsp) error
	}
	type FilmServiceExt struct {
		filmServiceExt
	}
	h := &filmServiceExtHandler{hdlr}
	return s.Handle(s.NewHandler(&FilmServiceExt{h}, opts...))
}

type filmServiceExtHandler struct {
	FilmServiceExtHandler
}

func (h *filmServiceExtHandler) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, out *HotPlayMoviesRsp) error {
	return h.FilmServiceExtHandler.HotPlayMovies(ctx, in, out)
}

func (h *filmServiceExtHandler) MovieDetail(ctx context.Context, in *MovieDetailReq, out *MovieDetailRsp) error {
	return h.FilmServiceExtHandler.MovieDetail(ctx, in, out)
}

func (h *filmServiceExtHandler) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, out *MovieCreditsWithTypesRsp) error {
	return h.FilmServiceExtHandler.MovieCreditsWithTypes(ctx, in, out)
}

func (h *filmServiceExtHandler) ImageAll(ctx context.Context, in *ImageAllReq, out *ImageAllRsp) error {
	return h.FilmServiceExtHandler.ImageAll(ctx, in, out)
}

func (h *filmServiceExtHandler) LocationMovies(ctx context.Context, in *LocationMoviesReq, out *LocationMoviesRsp) error {
	return h.FilmServiceExtHandler.LocationMovies(ctx, in, out)
}

func (h *filmServiceExtHandler) MovieComingNew(ctx context.Context, in *MovieComingNewReq, out *MovieComingNewRsp) error {
	return h.FilmServiceExtHandler.MovieComingNew(ctx, in, out)
}

func (h *filmServiceExtHandler) Search(ctx context.Context, in *SearchReq, out *SearchRsp) error {
	return h.FilmServiceExtHandler.Search(ctx, in, out)
}

func (h *filmServiceExtHandler) GetFilmsByCidADay(ctx context.Context, in *GetFilmsByCidADayReq, out *GetFilmsByCidADayRsp) error {
	return h.FilmServiceExtHandler.GetFilmsByCidADay(ctx, in, out)
}
